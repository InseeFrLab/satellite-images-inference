apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: parallel-predict-
spec:
  serviceAccountName: workflow
  volumes:
    - name: dshm
      emptyDir:
        medium: Memory
        sizeLimit: 16Gi
  entrypoint: main
  arguments:
    parameters:
      - name: predict-conf-list
        value: '[
          {"DEP": "MAYOTTE", "YEAR": "2023"},
          {"DEP": "MAYOTTE", "YEAR": "2022"},
          {"DEP": "MAYOTTE", "YEAR": "2020"},
          {"DEP": "MAYOTTE", "YEAR": "2019"},
          {"DEP": "MAYOTTE", "YEAR": "2017"},

          {"DEP": "GUADELOUPE", "YEAR": "2022"},
          {"DEP": "GUADELOUPE", "YEAR": "2020"},
          {"DEP": "GUADELOUPE", "YEAR": "2019"},
          {"DEP": "GUADELOUPE", "YEAR": "2018"},

          {"DEP": "MARTINIQUE", "YEAR": "2022"},
          {"DEP": "MARTINIQUE", "YEAR": "2018"},

          {"DEP": "REUNION", "YEAR": "2023"},
          {"DEP": "REUNION", "YEAR": "2022"},

          {"DEP": "GUYANE", "YEAR": "2023"},
          {"DEP": "GUYANE", "YEAR": "2022"},

          {"DEP": "SAINT-MARTIN", "YEAR": "2024"}

          ]'

  templates:
    - name: main
      dag:
        tasks:
          - name: run-predict-with-params
            template: run-predict-wt
            arguments:
              parameters:
                - name: DEP
                  value: "{{item.DEP}}"
                - name: YEAR
                  value: "{{item.YEAR}}"
            # Pass the inputs to the task using "withParam"
            withParam: "{{workflow.parameters.predict-conf-list}}"

    - name: run-predict-wt
      inputs:
        parameters:
          - name: DEP
          - name: YEAR
      container:
        image: inseefrlab/onyxia-python-pytorch:py3.12.9
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 3
        command: ["/bin/bash", -c]
        args:
          - |
            git clone https://github.com/InseeFrLab/satellite-images-inference.git &&
            cd satellite-images-inference/ &&

            # Install dependencies
            uv sync &&

            # Define a env var for GDAL
            export PROJ_LIB=$(uv run python -c "from osgeo import __file__ as f; import os; print(os.path.join(os.path.dirname(f), 'data', 'proj'))")

            # Make predictions
            uv run -m src.make_predictions_from_api --dep {{inputs.parameters.DEP}} --year {{inputs.parameters.YEAR}} &&
            # Make evolutions
            uv run -m src.constructions_destructions --dep {{inputs.parameters.DEP}} --year {{inputs.parameters.YEAR}} &&

            # Fetch the JSON data and store model info in variables
            MODEL_INFO=$(curl -s 'https://satellite-images-inference.lab.sspcloud.fr/') &&
            MODEL_NAME=$(echo $MODEL_INFO | jq -r '.model_name') &&
            MODEL_VERSION=$(echo $MODEL_INFO | jq -r '.model_version') &&
            POD_NAME=geoserver-pod-0 &&

            # Copy images, predictions and evolutions to geoserver
            ./bash/copy_to_geoserver.sh {{inputs.parameters.DEP}} {{inputs.parameters.YEAR}} $MODEL_NAME $MODEL_VERSION $POD_NAME
        volumeMounts:
          - mountPath: /dev/shm
            name: dshm
        env:
          # env var for s3 connexion
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: my-s3-creds
                key: accessKey
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: my-s3-creds
                key: secretKey
          - name: AWS_DEFAULT_REGION
            value: us-east-1
          - name: AWS_S3_ENDPOINT
            value: minio.lab.sspcloud.fr
